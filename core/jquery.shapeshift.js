// Generated by CoffeeScript 1.4.0
(function() {

  (function($, window, document, undefined_) {
    var Plugin, defaults, pluginName;
    pluginName = "shapeshift";
    defaults = {
      align: "center",
      columns: null,
      colWidth: null,
      gutterX: 10,
      gutterY: 10
    };
    Plugin = function(element, options) {
      this.options = $.extend({}, defaults, options);
      this.grid = {};
      this.$container = $(element);
      this.children = [];
      return this.init();
    };
    Plugin.prototype = {
      init: function() {
        this._parseAllChildren();
        this._initializeGrid();
        return this._arrange();
      },
      insert: function($child, i) {
        if (i === void 0) {
          i = this.children.length;
        }
        this.$container.append($child);
        this._addChild($child, i);
        this._calculateGrid();
        return this._arrange();
      },
      _parseAllChildren: function() {
        var $child, $children, child_count, i, _i;
        $children = this.$container.children();
        child_count = $children.length;
        for (i = _i = 0; 0 <= child_count ? _i < child_count : _i > child_count; i = 0 <= child_count ? ++_i : --_i) {
          $child = $($children[i]);
          this._addChild($child, i);
        }
        return this;
      },
      _addChild: function($child, i) {
        return this.children.splice(i, 0, {
          el: $child,
          colspan: parseInt($child.attr("data-ss-colspan")) || 1,
          height: $child.outerHeight()
        });
      },
      _initializeGrid: function() {
        var fc_colspan, fc_width, first_child, gutter_x, single_width;
        gutter_x = this.options.gutterX;
        if (this.options.colWidth) {
          this.grid.col_width = this.options.colWidth + gutter_x;
        } else {
          first_child = this.children[0];
          fc_width = first_child.el.outerWidth();
          fc_colspan = first_child.colspan;
          single_width = (fc_width - ((fc_colspan - 1) * gutter_x)) / fc_colspan;
          this.grid.col_width = single_width + gutter_x;
        }
        this.grid.padding_left = parseInt(this.$container.css("padding-left"));
        this.grid.padding_right = parseInt(this.$container.css("padding-right"));
        this.grid.padding_top = parseInt(this.$container.css("padding-top"));
        this.grid.padding_bottom = parseInt(this.$container.css("padding-bottom"));
        return this._calculateGrid();
      },
      _calculateGrid: function() {
        var child_offset, col_width, columns, container_inner_width, grid_width;
        col_width = this.grid.col_width;
        container_inner_width = this.$container.width();
        columns = this.options.columns || Math.floor(container_inner_width / col_width);
        if (columns > this.children.length) {
          columns = this.children.length;
        }
        this.grid.columns = columns;
        child_offset = this.grid.padding_left;
        grid_width = (columns * col_width) - this.options.gutterX;
        switch (this.options.align) {
          case "center":
            child_offset += (container_inner_width - grid_width) / 2;
            break;
          case "right":
            child_offset += container_inner_width - grid_width;
        }
        return this.grid.child_offset = child_offset;
      },
      _arrange: function() {
        var $child, child_count, children, i, position, positions, _i;
        children = this.children;
        child_count = children.length;
        positions = this._getPositions();
        for (i = _i = 0; 0 <= child_count ? _i < child_count : _i > child_count; i = 0 <= child_count ? ++_i : --_i) {
          $child = children[i].el;
          position = positions[i];
          console.log(position);
          $child.css(position);
        }
        return this;
      },
      _getPositions: function() {
        var child, col, col_heights, col_width, columns, gutter_y, i, left, offset_left, padding_top, positions, top, total_children, _i, _j;
        col_width = this.grid.col_width;
        gutter_y = this.options.gutterY;
        padding_top = this.grid.padding_top;
        col_heights = [];
        columns = this.grid.columns;
        for (i = _i = 0; 0 <= columns ? _i < columns : _i > columns; i = 0 <= columns ? ++_i : --_i) {
          col_heights.push(padding_top);
        }
        positions = [];
        total_children = this.children.length;
        offset_left = this.grid.child_offset;
        for (i = _j = 0; 0 <= total_children ? _j < total_children : _j > total_children; i = 0 <= total_children ? ++_j : --_j) {
          child = this.children[i];
          col = this.lowestCol(col_heights);
          left = (col * col_width) + offset_left;
          top = col_heights[col];
          positions.push({
            left: left,
            top: top
          });
          col_heights[col] += child.height + gutter_y;
        }
        this.grid.height = this.highestCol(col_heights) - gutter_y - padding_top;
        return positions;
      },
      lowestCol: function(array) {
        return $.inArray(Math.min.apply(window, array), array);
      },
      highestCol: function(array) {
        return array[$.inArray(Math.max.apply(window, array), array)];
      }
    };
    return $.fn[pluginName] = function(options) {
      var args, returns, scoped_name;
      args = arguments;
      scoped_name = "plugin_" + pluginName;
      if (options === undefined || typeof options === "object") {
        return this.each(function() {
          if (!$.data(this, scoped_name)) {
            return $.data(this, scoped_name, new Plugin(this, options));
          }
        });
      } else if (typeof options === "string" && options[0] !== "_" && options !== "init") {
        returns = void 0;
        this.each(function() {
          var instance;
          instance = $.data(this, scoped_name);
          if (instance instanceof Plugin && typeof instance[options] === "function") {
            returns = instance[options].apply(instance, Array.prototype.slice.call(args, 1));
          }
          if (options === "destroy") {
            return $.data(this, scoped_name, null);
          }
        });
        if (returns !== undefined) {
          return returns;
        } else {
          return this;
        }
      }
    };
  })(jQuery, window, document);

}).call(this);
