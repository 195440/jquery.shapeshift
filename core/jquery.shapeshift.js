// Generated by CoffeeScript 1.4.0
(function() {

  (function($, window, document, undefined_) {
    var Plugin, defaults, pluginName;
    pluginName = "shapeshift";
    defaults = {
      enableResize: true,
      resizeRate: 300,
      cssAnimations: true,
      state: 'default',
      states: {
        "default": {
          animated: false,
          animateSpeed: 100,
          staggerInit: true,
          staggerSpeed: 50,
          sortDirection: 'horizontal',
          sortAlgorithm: 'grid',
          sortTolerance: 0,
          grid: {
            align: 'center',
            columns: null,
            colWidth: 200,
            gutter: [20, 10],
            padding: [20, 20]
          },
          "class": 'default',
          initClass: 'init'
        },
        secondary: {
          animated: true,
          animateSpeed: 100,
          grid: {
            align: 'center',
            columns: null,
            colWidth: null,
            gutter: ["auto", 10],
            padding: [50, 50]
          },
          "class": 'secondary',
          initClass: 'init'
        }
      }
    };
    Plugin = function(element, options) {
      this.options = $.extend({}, defaults, options);
      this.grid = {};
      this.grid.percent_cols = false;
      this.$container = $(element);
      this.children = [];
      this.stagger_queue = [];
      this.stagger_interval = null;
      this.state = this.options.states[this.options.state];
      return this.init();
    };
    Plugin.prototype = {
      init: function() {
        this._enableFeatures();
        this._parseChildren();
        this._initializeGrid();
        return this._arrange();
      },
      insert: function($child, i) {
        if (i === void 0) {
          i = 999999;
        }
        this._parseChild($child, i);
        this._initializeGrid();
        return this._arrange();
      },
      insertMany: function(children) {
        var $child, child, index, _i, _len;
        for (_i = 0, _len = children.length; _i < _len; _i++) {
          child = children[_i];
          $child = child[0];
          index = child[1] || 999999;
          this.$container.append($child);
          this._parseChild($child, index);
        }
        this._initializeGrid();
        return this._arrange();
      },
      setState: function(state_name) {
        var child, cssAnimations, new_state_class, old_state_class, state, _i, _len, _ref;
        state = this.options.states[state_name];
        if (state) {
          cssAnimations = this.options.cssAnimations;
          old_state_class = this.state["class"];
          new_state_class = state["class"];
          _ref = this.children;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            if (cssAnimations) {
              child.el.removeClass(old_state_class).addClass(new_state_class);
            } else {
              child.el.switchClass(old_state_class, new_state_class, this.options.animateSpeed);
            }
          }
          this.state = state;
          this._initializeGrid();
          return this._arrange();
        } else {
          return console.error("Shapeshift does not recognize the state '" + state_name + "', are you sure it's defined?");
        }
      },
      shuffle: function() {
        var a, i, j, t;
        a = this.children;
        i = a.length;
        while (--i > 0) {
          j = ~~(Math.random() * (i + 1));
          t = a[j];
          a[j] = a[i];
          a[i] = t;
        }
        this.children = a;
        return this._arrange();
      },
      _enableFeatures: function() {
        if (this.options.enableResize) {
          return this.enableResize();
        }
      },
      _parseChildren: function() {
        var $child, $children, child_count, i, _i;
        $children = this.$container.children();
        child_count = $children.length;
        for (i = _i = 0; 0 <= child_count ? _i < child_count : _i > child_count; i = 0 <= child_count ? ++_i : --_i) {
          $child = $($children[i]);
          this._parseChild($child, i);
        }
        return this;
      },
      _parseChild: function($child, i) {
        var colspan;
        colspan = parseInt($child.attr("data-ss-colspan")) || 1;
        if (!(colspan <= this.grid.maxColspan)) {
          this.grid.maxColspan = colspan;
        }
        return this.children.splice(i, 0, {
          el: $child,
          colspan: colspan,
          height: $child.outerHeight(),
          position: null,
          initialized: false
        });
      },
      _initializeGrid: function() {
        var col_width, grid_state, percent_col_width;
        grid_state = this.state.grid;
        col_width = grid_state.colWidth;
        percent_col_width = false;
        if (col_width === null) {
          if (this.children.length > 0) {
            col_width = this.children[0].el.innerWidth();
          }
        } else if (typeof col_width === "string") {
          if (col_width.indexOf("%") >= 0) {
            percent_col_width = true;
          }
        }
        this.grid.padding = grid_state.padding;
        this.grid.col_width = col_width;
        this.grid.percent_col_width = percent_col_width;
        return this._calculateGrid();
      },
      _calculateGrid: function() {
        var align, axis, child_offset, col_width, columns, container_width, full_width, grid_state, gutter, gutter_total, i, leftover_space, padding, _i, _j, _len, _results;
        grid_state = this.state.grid;
        padding = this.grid.padding;
        container_width = this.$container.innerWidth() - (padding[0] * 2);
        child_offset = padding[0];
        col_width = this.grid.col_width;
        if (this.grid.percent_col_width) {
          col_width = Math.floor(container_width * (parseInt(grid_state.colWidth) * .01));
        }
        gutter = grid_state.gutter.slice(0);
        for (i = _i = 0, _len = gutter.length; _i < _len; i = ++_i) {
          axis = gutter[i];
          if (typeof axis === "string") {
            if (axis.indexOf('%') > 0) {
              gutter[i] = Math.floor(container_width * (parseInt(axis) * .01));
            }
          }
        }
        columns = grid_state.columns;
        if (gutter[0] >= 0) {
          full_width = col_width + gutter[0];
          columns || (columns = Math.floor((container_width + gutter[0]) / full_width));
        } else {
          columns || (columns = Math.floor(container_width / col_width));
          gutter_total = container_width - (columns * col_width);
          gutter[0] = columns > 1 ? gutter_total / (columns - 1) : 0;
          full_width = col_width + gutter[0];
        }
        if (columns < this.grid.maxColspan) {
          columns = this.grid.maxColspan;
        }
        align = grid_state.align;
        if (align !== "left") {
          leftover_space = (container_width + gutter[0]) - (columns * full_width);
          if (leftover_space > 0) {
            child_offset += align === "right" ? leftover_space : leftover_space / 2;
          }
        }
        this.grid.columns = columns;
        this.grid.container_width = container_width;
        this.grid.gutter = gutter;
        this.grid.col_width = col_width;
        this.grid.full_width = full_width;
        this.grid.child_offset = child_offset;
        this.grid.col_heights_init = [];
        _results = [];
        for (i = _j = 0; 0 <= columns ? _j < columns : _j > columns; i = 0 <= columns ? ++_j : --_j) {
          _results.push(this.grid.col_heights_init.push(padding[1]));
        }
        return _results;
      },
      _arrange: function() {
        var $child, child, i, init_class, initialize, normal_class, position, position_string, positions, stagger_init, stagger_queue, stagger_speed, _i, _len, _ref;
        if (this.stagger_queue.length) {
          this._clearStaggerQueue();
        }
        positions = this._getPackPositions();
        init_class = this.state.initClass;
        normal_class = this.state["class"];
        stagger_speed = this.state.staggerSpeed;
        stagger_init = this.state.staggerInit;
        stagger_queue = [];
        this.$container.css({
          height: this.grid.height
        });
        _ref = this.children;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          child = _ref[i];
          $child = child.el;
          initialize = !child.initialized;
          position = positions[i];
          if (position) {
            if (initialize) {
              $child.addClass(init_class);
              child.initialized = true;
            }
            position_string = JSON.stringify(position);
            if (position_string !== child.position) {
              if (initialize) {
                stagger_queue.push([$child, position]);
              } else {
                this._move($child, position);
              }
              child.position = position_string;
            }
          }
        }
        if (stagger_queue.length) {
          this._staggerMove(stagger_queue);
        }
        return this;
      },
      _clearStaggerQueue: function() {
        var $child, child, position, stagger_queue, _i, _len;
        clearInterval(this.stagger_interval);
        this.stagger_interval = null;
        stagger_queue = this.stagger_queue;
        for (_i = 0, _len = stagger_queue.length; _i < _len; _i++) {
          child = stagger_queue[_i];
          if (child) {
            $child = child[0];
            position = child[1];
            this._move($child, position, true);
          }
        }
        return this.stagger_queue = [];
      },
      _staggerMove: function(stagger_queue) {
        var $child, child, i, position, _i, _len, _results,
          _this = this;
        if (this.state.staggerInit) {
          i = 0;
          this.stagger_queue = stagger_queue;
          return this.stagger_interval = setInterval(function() {
            var $child, child, position;
            child = stagger_queue[i];
            if (child) {
              $child = child[0];
              position = child[1];
              _this._move($child, position, true);
              _this.stagger_queue[i] = null;
              return i++;
            } else {
              clearInterval(_this.stagger_interval);
              return _this.stagger_interval = null;
            }
          }, this.state.staggerSpeed);
        } else {
          _results = [];
          for (_i = 0, _len = stagger_queue.length; _i < _len; _i++) {
            child = stagger_queue[_i];
            $child = child[0];
            position = child[1];
            _results.push(this._staggerTimeout($child, position));
          }
          return _results;
        }
      },
      _staggerTimeout: function($child, position) {
        var _this = this;
        return setTimeout(function() {
          return _this._move($child, position, true);
        }, 0);
      },
      _move: function($child, position, initialize_state) {
        var animate_speed, css_animations,
          _this = this;
        if (initialize_state == null) {
          initialize_state = false;
        }
        css_animations = this.options.cssAnimations;
        if (css_animations) {
          $child.css(position);
        } else {
          animate_speed = this.options.animateSpeed;
          $child.stop(true, false).animate(position, animate_speed);
        }
        if (initialize_state) {
          return setTimeout(function() {
            if (css_animations) {
              return $child.addClass(_this.state["class"]).removeClass(_this.state.initClass);
            } else {
              return $child.switchClass(_this.state.initClass, _this.state["class"], animate_speed);
            }
          }, 0);
        }
      },
      _getPackPositions: function() {
        var block, blocks, child, full_width, gutter_x, gutter_y, i, left, offset_left, packer, padding_y, positions, top, _i, _j, _len, _len1, _ref;
        gutter_y = this.grid.gutter[1];
        gutter_x = this.grid.gutter[0];
        packer = new Packer(this.grid.container_width + gutter_x, 9999);
        full_width = this.grid.full_width;
        offset_left = this.grid.child_offset;
        padding_y = this.grid.padding[1];
        blocks = [];
        _ref = this.children;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          child = _ref[i];
          child.el.text(i);
          block = {
            h: child.height + gutter_y,
            w: child.colspan * full_width
          };
          blocks.push(block);
        }
        packer.fit(blocks);
        positions = [];
        for (_j = 0, _len1 = blocks.length; _j < _len1; _j++) {
          block = blocks[_j];
          if (block.fit) {
            left = block.fit.x + offset_left;
            top = block.fit.y + padding_y;
            positions.push({
              transform: "translate(" + left + "px, " + top + "px)"
            });
          }
        }
        return positions;
      },
      lowestCol: function(array, colspan) {
        var max_span;
        if (colspan) {
          max_span = array.length + 1 - colspan;
          array = array.slice(0).splice(0, max_span);
        }
        return $.inArray(Math.min.apply(window, array), array);
      },
      highestCol: function(array) {
        return array[$.inArray(Math.max.apply(window, array), array)];
      },
      enableResize: function() {
        var resizing, speed,
          _this = this;
        speed = this.options.resizeRate;
        resizing = false;
        return $(window).on("resize", function() {
          if (!resizing) {
            resizing = true;
            setTimeout(function() {
              _this._calculateGrid();
              return _this._arrange();
            }, speed * .6);
            return setTimeout(function() {
              _this._calculateGrid();
              _this._arrange();
              return resizing = false;
            }, speed * 1.1);
          }
        });
      }
    };
    return $.fn[pluginName] = function(options) {
      var args, returns, scoped_name;
      args = arguments;
      scoped_name = "plugin_" + pluginName;
      if (options === undefined || typeof options === "object") {
        return this.each(function() {
          if (!$.data(this, scoped_name)) {
            return $.data(this, scoped_name, new Plugin(this, options));
          }
        });
      } else if (typeof options === "string" && options[0] !== "_" && options !== "init") {
        returns = void 0;
        this.each(function() {
          var instance;
          instance = $.data(this, scoped_name);
          if (instance instanceof Plugin && typeof instance[options] === "function") {
            returns = instance[options].apply(instance, Array.prototype.slice.call(args, 1));
          }
          if (options === "destroy") {
            return $.data(this, scoped_name, null);
          }
        });
        if (returns !== undefined) {
          return returns;
        } else {
          return this;
        }
      }
    };
  })(jQuery, window, document);

}).call(this);
